{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Project\\\\14-challenge-solution\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { json, useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchedEvents, setFetchedEvents] = useState();\n  const [error, setError] = useState();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: data.events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }, this);\n}\n_s(EventsPage, \"toVHlWqII44aNDG9/yFxfMcYZUE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch(\"http://localhost:8080/eventsx\");\n  if (!response.ok) {\n    /* throw new Response(JSON.stringify({message:\"Could not fetch events data\"}),{\n    status:500}); */\n    throw json(new Response(JSON.stringify({\n      message: \"Could not fetch events data\"\n    }), {\n      status: 500\n    }));\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useEffect","useState","json","useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","isLoading","setIsLoading","fetchedEvents","setFetchedEvents","error","setError","data","isError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","events","_c","loader","response","fetch","ok","Response","JSON","stringify","status","$RefreshReg$"],"sources":["D:/React Project/14-challenge-solution/frontend/src/pages/Events.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { json, useLoaderData } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [fetchedEvents, setFetchedEvents] = useState();\n  const [error, setError] = useState();\n  const data=useLoaderData();\n  if(data.isError) {\n    return (\n      <p>{data.message}</p>\n    )\n  }\n  return (\n      <EventsList events={data.events} />\n  );\n}\n\nexport default EventsPage;\n\nexport async function loader(){\n    const response = await fetch(\"http://localhost:8080/eventsx\");\n\n    if (!response.ok) {\n       /* throw new Response(JSON.stringify({message:\"Could not fetch events data\"}),{\n      status:500}); */\n      throw json(\n        new Response(JSON.stringify({message:\"Could not fetch events data\"}),{\n          status:500})\n      )\n    } else {\n      return response;\n    }\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,IAAI,EAAEC,aAAa,QAAQ,kBAAkB;AAEtD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,CAAC;EACpD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,CAAC;EACpC,MAAMc,IAAI,GAACZ,aAAa,CAAC,CAAC;EAC1B,IAAGY,IAAI,CAACC,OAAO,EAAE;IACf,oBACEV,OAAA;MAAAW,QAAA,EAAIF,IAAI,CAACG;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAEzB;EACA,oBACIhB,OAAA,CAACF,UAAU;IAACmB,MAAM,EAAER,IAAI,CAACQ;EAAO;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEzC;AAACd,EAAA,CAbQD,UAAU;EAAA,QAINJ,aAAa;AAAA;AAAAqB,EAAA,GAJjBjB,UAAU;AAenB,eAAeA,UAAU;AAEzB,OAAO,eAAekB,MAAMA,CAAA,EAAE;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC;EAE7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACf;AACP;IACM,MAAM1B,IAAI,CACR,IAAI2B,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAACb,OAAO,EAAC;IAA6B,CAAC,CAAC,EAAC;MACnEc,MAAM,EAAC;IAAG,CAAC,CACf,CAAC;EACH,CAAC,MAAM;IACL,OAAON,QAAQ;EACjB;AACJ;AAAC,IAAAF,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}